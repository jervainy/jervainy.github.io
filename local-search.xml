<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello, World</title>
    <link href="/2025/034a17b156.html"/>
    <url>/2025/034a17b156.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy https://jervainy.github.io/<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MacOS如何彻底删除Python</title>
    <link href="/2025/0310a807dc.html"/>
    <url>/2025/0310a807dc.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>在 macOS 10.8-12.3 上，Apple 提供的 Python 版本将分别安装在 &#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework 和 &#x2F;usr&#x2F;bin&#x2F;python。 你不应当修改或删除这些内容，因为它们由 Apple 控制并由 Apple 或第三方软件使用。</p></blockquote><h1 id="1-删除从官网安装的Python"><a href="#1-删除从官网安装的Python" class="headerlink" title="1. 删除从官网安装的Python"></a>1. 删除从官网安装的Python</h1><p>如下是从官网安装的Python目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; <span class="hljs-built_in">ls</span> -l /Library/Frameworks/Python.framework<br>total 0<br>lrwxrwxr-x1rootwheel242710:14Headers -&gt; Versions/Current/Headers<br>lrwxrwxr-x1rootwheel232710:14Python -&gt; Versions/Current/Python<br>lrwxrwxr-x1rootwheel262710:14Resources -&gt; Versions/Current/Resources<br>drwxrwxr-x@1rootwheel1282710:14Versions<br><br>&gt; <span class="hljs-built_in">ls</span> -l /usr/local/bin|grep Python.framework<br>lrwxr-xr-x1rootwheel682710:14idle3 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.13/bin/idle3<br>lrwxr-xr-x  1 root  wheel712710:14idle3.13 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.13/bin/idle3.13<br>lrwxrwxr-x1rootadmin672710:14 pip3 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.13/bin/pip3<br>lrwxrwxr-x1rootadmin702710:14 pip3.13 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.13/bin/pip3.13<br>lrwxr-xr-x1rootwheel692710:14pydoc3 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.13/bin/pydoc3<br>lrwxr-xr-x1rootwheel722710:14pydoc3.13 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.13/bin/pydoc3.13<br>lrwxr-xr-x1rootwheel702710:14 python3 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.13/bin/python3<br>lrwxr-xr-x1rootwheel772710:14 python3-config -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.13/bin/python3-config<br>lrwxr-xr-x1rootwheel782710:14 python3-intel64 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.13/bin/python3-intel64<br>lrwxr-xr-x1rootwheel732710:14 python3.13 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.13/bin/python3.13<br>lrwxr-xr-x1rootwheel802710:14 python3.13-config -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.13/bin/python3.13-config<br>lrwxr-xr-x1rootwheel812710:14 python3.13-intel64 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.13/bin/python3.13-intel64<br><br>&gt; <span class="hljs-built_in">ls</span> -l /Applications | grep Python<br>drwxr-xr-x@10rootwheel3202710:14Python 3.13<br></code></pre></td></tr></table></figure><p>执行如下命令即可删除从官网安装的Python</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">删除/usr/local/bin目录下的文件</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-built_in">ls</span> -l /usr/local/bin|grep Python.framework|awk <span class="hljs-string">&#x27;&#123;print $9&#125;&#x27;</span>|xargs -t -I &#123;&#125; sudo <span class="hljs-built_in">rm</span> -f /usr/local/bin/&#123;&#125;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除/Library/Frameworks/Python.framework目录下的文件</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">sudo <span class="hljs-built_in">rm</span> -rf /Library/Frameworks/Python.framework</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据上面命令查询到的结果删除/Applications目录下的Python 3.13</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">sudo <span class="hljs-built_in">rm</span> -rf /Applications/Python\ 3.13</span><br></code></pre></td></tr></table></figure><p>如果仅想删除特定版本的Python，请调整上面命令中的grep参数即可</p><h1 id="2-删除Homebrew安装的Python"><a href="#2-删除Homebrew安装的Python" class="headerlink" title="2. 删除Homebrew安装的Python"></a>2. 删除Homebrew安装的Python</h1><p>如果你的电脑没有安装过Homebrew，请忽略这一步骤.</p><ol><li><p>查询homebrew是否有安装过python</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; brew list|grep python<br>python@3.10<br></code></pre></td></tr></table></figure></li><li><p>卸载homebrew安装的python</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">&gt; brew uninstall python@<span class="hljs-number">3.10</span><br>Uninstalling <span class="hljs-regexp">/opt/</span>homebrew<span class="hljs-regexp">/Cellar/</span>python@<span class="hljs-number">3.10</span>/<span class="hljs-number">3.10</span>.<span class="hljs-number">14</span>_1... (<span class="hljs-number">3</span>,<span class="hljs-number">100</span> files, <span class="hljs-number">56.6</span>MB)<br>==&gt; Autoremoving <span class="hljs-number">1</span> unneeded formula:<br>gdbm<br>Uninstalling <span class="hljs-regexp">/opt/</span>homebrew<span class="hljs-regexp">/Cellar/g</span>dbm/<span class="hljs-number">1.24</span>... (<span class="hljs-number">26</span> files, <span class="hljs-number">1</span>MB)<br></code></pre></td></tr></table></figure></li></ol><h1 id="3-删除Pyenv安装的Python"><a href="#3-删除Pyenv安装的Python" class="headerlink" title="3. 删除Pyenv安装的Python"></a>3. 删除Pyenv安装的Python</h1><p>如果你没有使用Pyenv，请忽略这一步骤.</p><ol><li><p>查询Pyenv已安装的Python版本</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&gt; pyenv versions<br>  <span class="hljs-keyword">system</span><br>* <span class="hljs-number">3.10</span><span class="hljs-number">.14</span> (<span class="hljs-built_in">set</span> <span class="hljs-keyword">by</span> /Users/jervain/.pyenv/<span class="hljs-built_in">version</span>)<br></code></pre></td></tr></table></figure><p>其中system为系统自带的版本(非Pyenv安装的版本)，3.10.14为通过Pyenv安装的版本</p></li><li><p>卸载通过Pyenv安装的Python</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-punctuation">&gt;</span> <span class="hljs-string">pyenv uninstall -f 3.10.14</span><br><span class="hljs-attribute">pyenv</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3.10.14 uninstalled</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java泛型－概念</title>
    <link href="/2025/03f8f6a73c.html"/>
    <url>/2025/03f8f6a73c.html</url>
    
    <content type="html"><![CDATA[<h3 id="1-什么是Java泛型"><a href="#1-什么是Java泛型" class="headerlink" title="1. 什么是Java泛型?"></a>1. 什么是Java泛型?</h3><p>Java泛型是JDK 5 中引入的一种编程语言特性，它允许在编写代码时使用参数化类型。泛型的主要目的是提高代码的灵活性和重用性，同时在编译时提供更强的类型检查。<br>泛型具有以下优点：</p><ul><li>编译时的强类型检查 </li><li>避免了类型转换</li><li>泛型编程可以实现通用算法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 未使用泛型</span><br><span class="hljs-type">List</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>list1.add(<span class="hljs-number">1</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> (Integer) list1.get(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 使用泛型</span><br>List&lt;String&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list2.add(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> list2.get(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>以上例子在未使用泛型的情况下，list1中存放的是Object类型，在从list1中获取i1时需要进行强制类型转换，如果在list1中不小心放入了String类型，程序在运行中会抛出异常;<br>在使用泛型后，list2中只能存放String类型，如果往list2中放入Integer类型，在编写和编译代码时就能依赖JVM的强类型检查尽早发现错误。  </p><h3 id="2-泛型的基本使用"><a href="#2-泛型的基本使用" class="headerlink" title="2. 泛型的基本使用"></a>2. 泛型的基本使用</h3><h4 id="2-1-泛型类"><a href="#2-1-泛型类" class="headerlink" title="2.1 泛型类"></a>2.1 泛型类</h4><p>泛型类的声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">KvPair</span>&lt;K, V&gt; &#123;<br>    K key;<br>    V value;<br>&#125;<br><br><br>KvPair&lt;Integer, String&gt; pair1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KvPair</span>&lt;&gt;(); <span class="hljs-comment">// 正确  </span><br>KvPiar&lt;<span class="hljs-type">int</span>, string&gt; pair2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KvPair</span>&lt;&gt;(); <span class="hljs-comment">// 错误，不能是基本类型</span><br></code></pre></td></tr></table></figure><p>泛型的类型只能是类，不能是基本类型  </p><h4 id="2-2-泛型接口"><a href="#2-2-泛型接口" class="headerlink" title="2.2 泛型接口"></a>2.2 泛型接口</h4><p>泛型接口的声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 声明一个果篮</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">FruitBasket</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(T obj)</span>; <span class="hljs-comment">// 放入水果</span><br>    T <span class="hljs-title function_">get</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 取出水果</span><br>&#125;<br><br><span class="hljs-comment">// 苹果篮</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppleBasket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FruitBasket</span>&lt;Apple&gt; &#123;&#125;<br><br><span class="hljs-comment">// 橙子篮</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OrangeBasket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FruitBasket</span>&lt;Orange&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-泛型方法"><a href="#2-3-泛型方法" class="headerlink" title="2.3 泛型方法"></a>2.3 泛型方法</h4><p>泛型类中使用泛型方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 声明一个盒子，泛型定义在类上，方法使用类的泛型声明</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(T data)</span> &#123;&#125;<br><br>    T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>非泛型类中使用泛型方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 声明一个盒子，泛型定义在类上，方法使用类的泛型声明</span><br><span class="hljs-comment">// put方法、get方法不是同一个泛型类型，虽然泛型标识都是T</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span> &#123;<br><br>    &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(T data)</span> &#123;&#125;<br><br>    &lt;T&gt; T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>静态方法上使用泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(T data)</span> &#123;&#125;<br><br>    T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 因为类已定义了泛型T，在静态方法中不能再使用T</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E&gt; Box&lt;E&gt; <span class="hljs-title function_">of</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;&gt;();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-泛型的上界、下界"><a href="#2-4-泛型的上界、下界" class="headerlink" title="2.4 泛型的上界、下界"></a>2.4 泛型的上界、下界</h4><p>在使用泛型的时候，我们可以为传入的泛型类型实参进行上下边界的限制。  </p><p><strong>泛型上界</strong>：传入的类型实参必须是指定类型或者指定类型的子类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span>&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 错误, Integer是Number的子类型</span><br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">2.0</span>)); <span class="hljs-comment">// 错误, Double是Number的子类型</span><br><span class="hljs-type">Number</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p><code>List&lt;? extends T&gt;</code>是被设计用来读取数据的泛型，并且只能读取类型为T的元素。如果要满足List&lt;? extends T&gt;能添加元素，需满足List中的任何一个元素都能被转换为T的子类，所以<code>List&lt;? extends T&gt;</code>不能用来写入元素。</p><p><strong>泛型下界</strong>：传入的类型实参必须是指定类型或者指定类型的父类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;? <span class="hljs-built_in">super</span> Number&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 正确, Integer是Number的子类型</span><br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">2.0</span>)); <span class="hljs-comment">// 正确, Double是Number的子类型</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>); <span class="hljs-comment">// 正确，但是需要强转为指定类型，失去了泛型的意义</span><br></code></pre></td></tr></table></figure><p><code>List&lt;? super T&gt;</code>是被设计用来存储数据的，只能添加T类型或其子类类型。因为List中的任何一个元素都能向上转型为T类型或者T的父类型。</p><p>PECS<br>PECS是”Producer Extends,Consumer Super”（生产者用Extends，消费者用Super）的缩写。</p><ul><li>“Producer Extends”的意思是，如果需要一个List去生产T类型的数据（需要从List中读取T类型实例），就声明List中的元素为<code>&lt;? extends T&gt;</code>，例如<code>List&lt;? extends Integer&gt;</code>，但是不能往里面添加元素。</li><li>“Consumer Super”的意思是，如果需要一个List去消费T类型的数据（需要往List中添加T类型实例），就声明List中的元素为<code>&lt;? super T&gt;</code>，例如<code>List&lt;? super Integer&gt;</code>。但是不能保证从这个List中读取出来的数据类型。</li></ul><h4 id="2-5-无界通配符与向上转型"><a href="#2-5-无界通配符与向上转型" class="headerlink" title="2.5 无界通配符与向上转型"></a>2.5 无界通配符与向上转型</h4><p><strong>向上转型是指用子类实例去初始化父类，这是面向对象中多态的重要表现。</strong>    </p><p>语法形式：<code>&lt;?&gt;</code>，不依赖于类型参数的泛型，不能添加数据，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;?&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 错误</span><br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">2.0</span>)); <span class="hljs-comment">// 错误</span><br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()); <span class="hljs-comment">// 错误</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>); <span class="hljs-comment">// 失去了泛型的意义</span><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">print1</span><span class="hljs-params">(List&lt;Number&gt; list)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">print2</span><span class="hljs-params">(List&lt;?&gt; list)</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    print1(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;()); <span class="hljs-comment">// 错误</span><br>    print2(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;()); <span class="hljs-comment">// 正确</span><br>&#125;<br></code></pre></td></tr></table></figure><p>泛型不能向上转型，但是可以通过使用通配符来向上转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Integer</span>&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span>&gt; list2 = list1; <span class="hljs-comment">// 正确</span><br></code></pre></td></tr></table></figure><h4 id="2-6-泛型数组"><a href="#2-6-泛型数组" class="headerlink" title="2.6 泛型数组"></a>2.6 泛型数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt;[] list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;[<span class="hljs-number">10</span>]; <span class="hljs-comment">//编译错误 </span><br>List&lt;String&gt;[] list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;?&gt;[<span class="hljs-number">10</span>]; <span class="hljs-comment">//编译错误</span><br>List&lt;String&gt;[] list3 = (List&lt;String&gt;[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;?&gt;[<span class="hljs-number">10</span>]; <span class="hljs-comment">//正确,有警告 </span><br>List&lt;?&gt;[] list4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;[<span class="hljs-number">10</span>]; <span class="hljs-comment">//编译错误</span><br>List&lt;?&gt;[] list5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;?&gt;[<span class="hljs-number">10</span>]; <span class="hljs-comment">// 正确</span><br>List&lt;String&gt;[] list6 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>[<span class="hljs-number">10</span>]; <span class="hljs-comment">//正确，有警告</span><br></code></pre></td></tr></table></figure><h3 id="3-深入理解Java泛型"><a href="#3-深入理解Java泛型" class="headerlink" title="3. 深入理解Java泛型"></a>3. 深入理解Java泛型</h3><h4 id="3-1-泛型擦除"><a href="#3-1-泛型擦除" class="headerlink" title="3.1 泛型擦除"></a>3.1 泛型擦除</h4><p>Java的泛型实现采取了“伪泛型”的策略，即语法上支持泛型，但是在编译阶段会进行“类型擦除”，将所有的泛型表示（尖括号中的内容）都替换为具体的类型。  </p><p>类型擦除的方式：  </p><ul><li><p>删除类型参数声明，即删除&lt;&gt;的部分</p></li><li><p>根据上下界推断，将泛型类型替换为具体类型：如果是无界通配符(?)或者无上下界限制则替换为Object；存在上下界限制时则替换为限制的类型</p></li><li><p>插入强转换代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span>&lt;T&gt; &#123; T data; &#125;  ==&gt;  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span> &#123; Object data; &#125; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span>&gt; &#123; T data; &#125;  ==&gt;  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span> &#123; Number data; &#125; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span>&lt;T <span class="hljs-built_in">super</span> Number&gt; &#123; T data; &#125;  ==&gt;  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span> &#123; Number data; &#125; <br></code></pre></td></tr></table></figure></li></ul><h4 id="3-2-泛型和反射"><a href="#3-2-泛型和反射" class="headerlink" title="3.2 泛型和反射"></a>3.2 泛型和反射</h4><ul><li><p>泛型的实例化<br>因为泛型不存在Class文件，所以泛型不能直接实例化；但是可以通过反射进行实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">T</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>(); <span class="hljs-comment">// 错误</span><br>Class&lt;T&gt; clazz;<br><span class="hljs-type">T</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> (T) clazz.newInstance(); <span class="hljs-comment">// 正确</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>泛型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>泛型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用python绘制地震地图</title>
    <link href="/2025/0399e01d79.html"/>
    <url>/2025/0399e01d79.html</url>
    
    <content type="html"><![CDATA[<p>前些天在办公时微信的一条公众号消息突然映入我眼帘</p><p><img src="https://s2.loli.net/2024/01/26/DQs3TYvjgrSa9MR.png" alt="乐山地震"></p><p>身处四川的我马上就想到要不绘制一个地震地图，看下自己周边的地震情况。</p><p>说干就干，在我脑海中马上就浮现了这么几个步骤：</p><h3 id="1-查询地震数据"><a href="#1-查询地震数据" class="headerlink" title="1. 查询地震数据"></a>1. 查询地震数据</h3><p>于是我立马访问了中国地震台网，得到了近一年地震接口的API</p><p><img src="https://s2.loli.net/2024/01/26/MmHXvZeylgtYd2U.png"></p><p>返回的是一个<code>jsonp</code>的数据结构</p><p>当我们的请求地址为<code>/ajax/speedsearch?num=6&amp;page=9&amp;callback=call</code>时，返回的数据结构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs jsonp">call(&#123;<br>    &quot;shuju&quot;:[<br>        &#123;<br>            &quot;id&quot;: &quot;45773&quot;,<br>            &quot;CATA_ID&quot;: &quot;CD20231224195141.00&quot;,<br>            &quot;SAVE_TIME&quot;: &quot;2023-12-24 20:00:50&quot;,<br>            &quot;O_TIME&quot;: &quot;2023-12-24 19:51:41&quot;,<br>            &quot;EPI_LAT&quot;: &quot;38.43&quot;,<br>            &quot;EPI_LON&quot;: &quot;75.39&quot;,<br>            &quot;EPI_DEPTH&quot;: 142,<br>            &quot;AUTO_FLAG&quot;: &quot;M&quot;,<br>            &quot;EQ_TYPE&quot;: &quot;M&quot;,<br>            &quot;O_TIME_FRA&quot;: &quot;0&quot;,<br>            &quot;M&quot;: &quot;3.3&quot;,<br>            &quot;M_MS&quot;: &quot;0&quot;,<br>            &quot;M_MS7&quot;: &quot;0&quot;,<br>            &quot;M_ML&quot;: &quot;0&quot;,<br>            &quot;M_MB&quot;: &quot;0&quot;,<br>            &quot;M_MB2&quot;: &quot;0&quot;,<br>            &quot;SUM_STN&quot;: &quot;0&quot;,<br>            &quot;LOC_STN&quot;: &quot;0&quot;,<br>            &quot;LOCATION_C&quot;: &quot;新疆克孜勒苏州阿克陶县&quot;,<br>            &quot;LOCATION_S&quot;: &quot;&quot;,<br>            &quot;CATA_TYPE&quot;: &quot;&quot;,<br>            &quot;SYNC_TIME&quot;: &quot;2023-12-24 20:00:56&quot;,<br>            &quot;IS_DEL&quot;: &quot;&quot;,<br>            &quot;EQ_CATA_TYPE&quot;: &quot;&quot;,<br>            &quot;NEW_DID&quot;: &quot;CD20231224195141&quot;<br>        &#125;,<br>        ....<br>    ],<br>    &quot;jieguo&quot;:&quot;最近一年地震信息&quot;,<br>    &quot;page&quot;: &quot;&lt;div class=\&quot;paging\&quot; style=\&quot;margin-top: 0px;\&quot;&gt;\n    &lt;div class=\&quot;pagination\&quot;&gt;\n        &lt;ul&gt;\n                        \n\n                &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;1\&quot; alt=\&quot;首页\&quot; title=\&quot;首页\&quot;&gt;首页&lt;\/a&gt;&lt;\/li&gt;\n                &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void(0)\&quot; page=\&quot;8\&quot; alt=\&quot;上一页\&quot; title=\&quot;上一页\&quot;&gt;«&lt;\/a&gt;&lt;\/li&gt;\n\n\n                \n\n            \n            \n                        \n                                    &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;5\&quot;&gt;5&lt;\/a&gt;&lt;\/li&gt;\n                    \n                                        \n                                    &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;6\&quot;&gt;6&lt;\/a&gt;&lt;\/li&gt;\n                    \n                                        \n                                    &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;7\&quot;&gt;7&lt;\/a&gt;&lt;\/li&gt;\n                    \n                                        \n                                    &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;8\&quot;&gt;8&lt;\/a&gt;&lt;\/li&gt;\n                    \n                                        \n                &lt;li class=\&quot;active\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;9\&quot; &gt;9&lt;\/a&gt;&lt;\/li&gt;\n\n                                        \n                                    &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;10\&quot;&gt;10&lt;\/a&gt;&lt;\/li&gt;\n                    \n                                        \n                                    &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;11\&quot;&gt;11&lt;\/a&gt;&lt;\/li&gt;\n                    \n                                        \n                                    &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;12\&quot;&gt;12&lt;\/a&gt;&lt;\/li&gt;\n                    \n                                        \n                                    &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;13\&quot;&gt;13&lt;\/a&gt;&lt;\/li&gt;\n                    \n                            \n                                        &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void(0)\&quot; page=\&quot;10\&quot; title=\&quot;下一页\&quot; alt=\&quot;下一页\&quot;&gt;»&lt;\/a&gt;&lt;\/li&gt;\n                &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void(0)\&quot; page=\&quot;55\&quot; title=\&quot;尾页\&quot; alt=\&quot;尾页\&quot;&gt;尾页&lt;\/a&gt;&lt;\/li&gt;\n                \n                    &lt;\/ul&gt;\n    &lt;\/div&gt;\n&lt;\/div&gt;\n&quot;,<br>    &quot;num&quot;: 55<br>&#125;)<br></code></pre></td></tr></table></figure><p>当我们不传callback参数时，返回的数据如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs jsonp">(&#123;<br>    &quot;shuju&quot;:[<br>        &#123;<br>            &quot;id&quot;: &quot;45773&quot;,<br>            &quot;CATA_ID&quot;: &quot;CD20231224195141.00&quot;,<br>            &quot;SAVE_TIME&quot;: &quot;2023-12-24 20:00:50&quot;,<br>            &quot;O_TIME&quot;: &quot;2023-12-24 19:51:41&quot;,<br>            &quot;EPI_LAT&quot;: &quot;38.43&quot;,<br>            &quot;EPI_LON&quot;: &quot;75.39&quot;,<br>            &quot;EPI_DEPTH&quot;: 142,<br>            &quot;AUTO_FLAG&quot;: &quot;M&quot;,<br>            &quot;EQ_TYPE&quot;: &quot;M&quot;,<br>            &quot;O_TIME_FRA&quot;: &quot;0&quot;,<br>            &quot;M&quot;: &quot;3.3&quot;,<br>            &quot;M_MS&quot;: &quot;0&quot;,<br>            &quot;M_MS7&quot;: &quot;0&quot;,<br>            &quot;M_ML&quot;: &quot;0&quot;,<br>            &quot;M_MB&quot;: &quot;0&quot;,<br>            &quot;M_MB2&quot;: &quot;0&quot;,<br>            &quot;SUM_STN&quot;: &quot;0&quot;,<br>            &quot;LOC_STN&quot;: &quot;0&quot;,<br>            &quot;LOCATION_C&quot;: &quot;新疆克孜勒苏州阿克陶县&quot;,<br>            &quot;LOCATION_S&quot;: &quot;&quot;,<br>            &quot;CATA_TYPE&quot;: &quot;&quot;,<br>            &quot;SYNC_TIME&quot;: &quot;2023-12-24 20:00:56&quot;,<br>            &quot;IS_DEL&quot;: &quot;&quot;,<br>            &quot;EQ_CATA_TYPE&quot;: &quot;&quot;,<br>            &quot;NEW_DID&quot;: &quot;CD20231224195141&quot;<br>        &#125;,<br>        ....<br>    ],<br>    &quot;jieguo&quot;:&quot;最近一年地震信息&quot;,<br>    &quot;page&quot;: &quot;&lt;div class=\&quot;paging\&quot; style=\&quot;margin-top: 0px;\&quot;&gt;\n    &lt;div class=\&quot;pagination\&quot;&gt;\n        &lt;ul&gt;\n                        \n\n                &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;1\&quot; alt=\&quot;首页\&quot; title=\&quot;首页\&quot;&gt;首页&lt;\/a&gt;&lt;\/li&gt;\n                &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void(0)\&quot; page=\&quot;8\&quot; alt=\&quot;上一页\&quot; title=\&quot;上一页\&quot;&gt;«&lt;\/a&gt;&lt;\/li&gt;\n\n\n                \n\n            \n            \n                        \n                                    &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;5\&quot;&gt;5&lt;\/a&gt;&lt;\/li&gt;\n                    \n                                        \n                                    &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;6\&quot;&gt;6&lt;\/a&gt;&lt;\/li&gt;\n                    \n                                        \n                                    &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;7\&quot;&gt;7&lt;\/a&gt;&lt;\/li&gt;\n                    \n                                        \n                                    &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;8\&quot;&gt;8&lt;\/a&gt;&lt;\/li&gt;\n                    \n                                        \n                &lt;li class=\&quot;active\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;9\&quot; &gt;9&lt;\/a&gt;&lt;\/li&gt;\n\n                                        \n                                    &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;10\&quot;&gt;10&lt;\/a&gt;&lt;\/li&gt;\n                    \n                                        \n                                    &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;11\&quot;&gt;11&lt;\/a&gt;&lt;\/li&gt;\n                    \n                                        \n                                    &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;12\&quot;&gt;12&lt;\/a&gt;&lt;\/li&gt;\n                    \n                                        \n                                    &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void (0)\&quot; page=\&quot;13\&quot;&gt;13&lt;\/a&gt;&lt;\/li&gt;\n                    \n                            \n                                        &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void(0)\&quot; page=\&quot;10\&quot; title=\&quot;下一页\&quot; alt=\&quot;下一页\&quot;&gt;»&lt;\/a&gt;&lt;\/li&gt;\n                &lt;li class=\&quot;page\&quot;&gt;&lt;a href=\&quot;javascript:void(0)\&quot; page=\&quot;55\&quot; title=\&quot;尾页\&quot; alt=\&quot;尾页\&quot;&gt;尾页&lt;\/a&gt;&lt;\/li&gt;\n                \n                    &lt;\/ul&gt;\n    &lt;\/div&gt;\n&lt;\/div&gt;\n&quot;,<br>    &quot;num&quot;: 55<br>&#125;)<br></code></pre></td></tr></table></figure><p>我们需要的是<code>jsonp</code>数据结构中的<code>json</code>参数数据，我们只需要通过字符串截取第一个到倒数第一个之间的数据即可；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib3<br><br>urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dataSource</span>(<span class="hljs-params">pageNo</span>):<br>    response = requests.get(url=<span class="hljs-string">&#x27;https://www.ceic.ac.cn/ajax/speedsearch?num=6&amp;page=%d&#x27;</span> % pageNo, verify=<span class="hljs-literal">False</span>)<br>    text = response.text<br>    text = text[<span class="hljs-number">1</span>:<span class="hljs-built_in">len</span>(text) - <span class="hljs-number">1</span>]<br>    json_data = json.loads(text)<br>    last_page = <span class="hljs-built_in">int</span>(json_data[<span class="hljs-string">&#x27;num&#x27;</span>])<br>    <span class="hljs-keyword">return</span> last_page, json_data[<span class="hljs-string">&#x27;shuju&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="2-绘制地图"><a href="#2-绘制地图" class="headerlink" title="2. 绘制地图"></a>2. 绘制地图</h3><p>绘制地图采用的是<code>folium</code>库，通过如下简单的代码，便绘制出了一个地图，并保存到了html文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> folium<br><br>world_map = folium.Map()<br>world_map.save(<span class="hljs-string">&#x27;map.html&#x27;</span>)<br></code></pre></td></tr></table></figure><p>更多关于<code>folium</code>库的使用，请参考<a href="https://www.biaodianfu.com/folium.html">Python地图可视化之Folium &#8211; 标点符</a>，我使用的<code>folium</code>的版本是0.15.1</p><h3 id="3-将地震坐标绘制到地图中"><a href="#3-将地震坐标绘制到地图中" class="headerlink" title="3. 将地震坐标绘制到地图中"></a>3. 将地震坐标绘制到地图中</h3><p>通过前面的两步，已经拿到了地震数据和地图，剩下的工作就是将地震坐标渲染到地图上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> folium<br><br>world_map = folium.Map()<br>incidents = folium.<span class="hljs-built_in">map</span>.FeatureGroup()<br><br>page = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    last, data = dataSource(page)<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br>        incidents.add_child(folium.CircleMarker(<br>            [<span class="hljs-built_in">float</span>(item[<span class="hljs-string">&#x27;EPI_LAT&#x27;</span>]), <span class="hljs-built_in">float</span>(item[<span class="hljs-string">&#x27;EPI_LON&#x27;</span>])],<br>            radius=<span class="hljs-number">7</span>,<br>            color=<span class="hljs-string">&#x27;yellow&#x27;</span>,<br>            fill=<span class="hljs-literal">True</span>,<br>            fill_color=<span class="hljs-string">&#x27;red&#x27;</span>,<br>            fill_opacity=<span class="hljs-number">0.4</span><br>        ))<br>    page += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> page &gt;= last:<br>        <span class="hljs-keyword">break</span><br><br>world_map.add_child(incidents)<br>world_map.save(<span class="hljs-string">&#x27;map.html&#x27;</span>)<br></code></pre></td></tr></table></figure><p>最后看一下渲染后的结果</p><p><img src="https://s2.loli.net/2024/01/26/igcphTnKqAXy84b.png" alt="地震地图"></p><h3 id="4-注意的地方"><a href="#4-注意的地方" class="headerlink" title="4. 注意的地方"></a>4. 注意的地方</h3><p>在实际项目过程中可能还会碰到如下问题，提供一些思路</p><h4 id="4-1-过滤区域，例如只展示中国的地震数据"><a href="#4-1-过滤区域，例如只展示中国的地震数据" class="headerlink" title="4.1 过滤区域，例如只展示中国的地震数据"></a>4.1 过滤区域，例如只展示中国的地震数据</h4><ul><li><p>调用地图厂商API，例如高德、百度等，传入经纬度，根据返回的国家、省份信息进行数据过滤</p></li><li><p>使用GeoJSON数据，具体的实现请参考文章<a href="http://www.linvon.cn/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%8F%8D%E6%9F%A5%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE/">如何使用经纬度反查地理位置？</a></p></li></ul><h4 id="4-2-坐标系转换"><a href="#4-2-坐标系转换" class="headerlink" title="4.2 坐标系转换"></a>4.2 坐标系转换</h4><p>目前我们常说的有三种坐标系</p><ul><li><p>WGS-84：是国际标准，GPS坐标（Google Earth使用、或者GPS模块）</p><p>地球坐标系，国际上通用的坐标系。 设备一般包含GPS芯片或者北斗芯片获取的经纬度为WGS84地理坐标系。谷歌地图采用的是WGS84地理坐标系（中国范围除外,谷歌中国地图采用的是GCJ02地理坐标系。)</p></li><li><p>GCJ-02：中国坐标偏移标准，Google Map、高德、腾讯使用</p><p>火星坐标系，WGS84坐标系经加密后的坐标系。 出于国家安全考虑，国内所有导航电子地图必须使用国家测绘局制定的加密坐标系统，即将一个真实的经纬度坐标加密成一个不正确的经纬度坐标。</p></li><li><p>BD-09：百度坐标偏移标准，Baidu Map使用</p><p>百度坐标系，在GCJ02坐标系基础上再次加密。其中bd09ll表示百度经纬度坐标，bd09mc表示百度墨卡托米制坐标。</p></li></ul><p>具体的转换方式请根据自己使用的开发语言，使用对应的依赖库或者转换算法实现，本文不过多描述</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>python</category>
      
      <category>地图</category>
      
      <category>folium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>学习笔记</tag>
      
      <tag>folium</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
